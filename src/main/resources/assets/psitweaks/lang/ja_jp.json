{
  "item.psitweaks.moval_suit_helmet": "M.O.V.A.L. スーツヘルメット",
  "item.psitweaks.moval_suit_chestplate": "M.O.V.A.L. スーツチェストプレート",
  "item.psitweaks.moval_suit_leggings": "M.O.V.A.L. スーツレギンス",
  "item.psitweaks.moval_suit_boots": "M.O.V.A.L. スーツブーツ",
  "item.psitweaks.moval_suit_leggings_ivory": "M.O.V.A.L. スーツレギンス",
  "item.psitweaks.flash_ring": "フラッシュリング",
  "item.psitweaks.psimetal_bow": "サイメタルの弓",
  "item.psitweaks.curios_controller": "キュリオスコントローラ",
  "item.psitweaks.enriched_psigem": "濃縮サイジェム",
  "item.psitweaks.enriched_ebony": "濃縮エボニー",
  "item.psitweaks.enriched_ivory": "濃縮アイボリー",
  "item.psitweaks.alloy_psion": "サイオニック合金",
  "item.psitweaks.psionic_control_circuit": "サイオニック制御回路",
  "item.psitweaks.flight_chip": "飛行チップ",
  "item.psitweaks.psionic_factor": "サイオニック因子",
  "item.psitweaks.psionic_factor_ivory": "偏陽サイオニック因子",
  "item.psitweaks.psionic_factor_ebony": "偏陰サイオニック因子",
  "item.psitweaks.chaotic_factor": "カオティック因子",
  "item.psitweaks.chaotic_psimetal": "カオティックサイメタル",
  "item.psitweaks.cad_assembly_alloy_psion": "サイオニック合金のCAD素体",
  "item.psitweaks.cad_assembly_chaotic_psimetal": "カオティックサイメタルのCAD素体",
  "item.psitweaks.auto_caster_tick": "術式自動起動デバイス: tick",
  "item.psitweaks.auto_caster_second": "術式自動起動デバイス: セカンド",

  "effect.psitweaks.parade": "仮想行列",
  "effect.psitweaks.flight": "飛行",
  "effect.psitweaks.barrier": "障壁",
  "effect.psitweaks.hardening": "硬化",

  "psitweaks.event.second": "§bイベント§7: セカンド",

  "infuse_type.psitweaks.infuse_psigem": "サイジェム",
  "infuse_type.psitweaks.infuse_ebony": "エボニー",
  "infuse_type.psitweaks.infuse_ivory": "アイボリー",
  "infuse_type.psitweaks.infuse_chaotic_factor": "混沌",

  "curios.identifier.magic_calculation_area": "魔法演算領域",

  "psitweaks.spellpiece.trick_explode_no_destroy": "作動式: 対人爆発",
  "psitweaks.spellpiece.trick_explode_no_destroy.desc": "ブロックを破壊しない爆発を起こす",

  "psitweaks.spellpiece.trick_parade": "作動式: パレード",
  "psitweaks.spellpiece.trick_parade.desc": "確率で被ダメージを回避する",

  "psitweaks.spellpiece.trick_flight": "作動式: 飛行",
  "psitweaks.spellpiece.trick_flight.desc": "クリエイティブ飛行を可能にする",

  "psitweaks.spellpiece.trick_barrier": "作動式: 障壁",
  "psitweaks.spellpiece.trick_barrier.desc": "受けるダメージを減少させる",

  "psitweaks.spellpiece.trick_hardening": "作動式: 硬化",
  "psitweaks.spellpiece.trick_hardening.desc": "大ダメージを受けた時、一定値まで減少させる",


  "creativetabs.psitweaks": "Psi: Tweaks and Additions",

  "psi.book.subtitle": "魔法学入門",
  "psi.book.name": "サイオニカ魔法大全",
  "psi.book.landing_text": "$(thing)Psi$(0) はあなたの創意工夫によって限界が決まる$(thing)魔法$(0)作成 mod です. 本書には, 熟練の魔法師になるために必要な知識がすべて収録されています.$(p)(本書は作成中です. 旧チュートリアル記事は「レガシーエントリー」でご覧いただけます.)",
  "psi.book.category.basics": "基礎",
  "psi.book.category.basics.desc": "$(thing)Psi$(0)を初めてご利用になる方は, こちらのすべての項目を必ずお読みになることをお勧めします. いずれも重要な情報が含まれています.",
  "psi.book.entry.introduction": "導入",
  "psi.book.page.introduction.0": "$(thing)Psi$(0)へようこそ！ 宇宙で最も偉大なスペルプログラムベースの魔法技術MODです！$(p)$(thing)Psi$(0)は（魔法科高校の劣等生シリーズにインスパイアされた）MODで, あなたの命令を実行する$(thing)魔法$(0)$(o)を創造・発動して意のままに操るmodです.$(p)魔法を操る魔法師への道へ踏み出すには, まず$(l:components/psidust)$(o)$(item)サイダスト$(0)$(/l)という素材が必要です――ただし, これを単純にクラフトできるものではありません.",
  "psi.book.page.introduction.1": "代わりに, まず$(l:basics/cad_assembler)$(o)$(item)CAD組立機(0)$(/l)と$(l:components/assembly#iron)$(o)$(item)鉄のCAD素体$(0)$(/l)を作成してください. (p)$(l:basics/cad_assembler)$(o)$(item)CAD組立機$(0)$(/l)を配置し, 開いて$(l:components/assembly#iron)$(o)$ (item)鉄のCAD素体$(0)$(/l)を挿入し, 非常に簡素な$(thing)術式補助演算機(0)（略して$(thing)CAD$(0)）を構築します. (p)そこから地面に$(item)レッドストーンダスト$(0)を数個落とし, 新しく作成した$(thing)CAD$(0)をダストに向けて, $(k:use)を発動して$(l:components/psidust)$(o)$(item)サイダスト$(0)$(/l)を生成します.",
  "psi.book.entry.cadAssembler": "CAD組立機",
  "psi.book.page.cadAssembler.0": "$(item)CAD組立機(0)は$(thing)Psi$(0)の中核であり, 二つの重要な機能を果たします. $(p)第一に, 構成部品から$(thing)CAD$(0)を組み立てます. 次に, $(o)空でない$() $(item)術式弾$(0)を$(thing)CAD$(0)に装填します.（$(l:items/spell_bullet)$(o)$(thing)術式弾$(0)$(/l)を保持する他のアイテム, 例えば$(l:items/tools)$(o)$ (thing)サイメタルツール$(0)$(/l)など）に$(o)空でない$(0)$(item)術式弾$(0)$を装填する.",
  "psi.book.page.cadAssembler.1": "CAD組立機のクラフト",
  "psi.book.page.cadAssembler.2": "最も簡素な魔法使用可能CAD",
  "psi.book.page.cadAssembler.3": "A $(thing)CAD$(0) is built from up to five components; the simplest $(thing)CAD$(0) only uses one component, an $(l:components/assembly)$(o)$(item)Assembly$(0)$(/l), though this is only useful for crafting $(l:components/psidust)$(o)$(item)Psidust$(0)$(/l).$(p)A $(thing)CAD$(0) capable of casting $(thing)Spells$(0) requires a $(l:components/core)$(o)$(item)Core$(0)$(/l) and a $(l:components/socket)$(o)$(item)Socket$(0)$(/l) as well.$(p)Adding a $(l:components/battery)$(o)$(item)Battery$(0)$(/l) slightly increases a user's maximum $(thing)Psi energy$(0), and adding a $(l:components/colorizer)$(o)$(item)Colorizer$(0)$(/l) changes the color of cast $(thing)Spells$(0), which is purely cosmetic.",
  "psi.book.page.cadAssembler.4": "Once a $(thing)CAD$(0) is created, it can be placed in the leftmost panel of the $(item)CAD Assembler$(0).$(p)When placed there, the slots below open; $(item)Spell Bullets$(0) can be placed in these slots to be loaded into the $(thing)CAD$(0).$(p)Once the $(l:items/spell_bullet)$(o)$(thing)Bullets$(0)$(/l) are loaded, the $(thing)CAD$(0) is removed and held, and the $(thing)Psi master keybind$(0) ($(k:psimisc.keybind)) is held, the $(l:items/spell_bullet)$(o)$(thing)Bullets$(0)$(/l)' $(thing)Spells$(0) will be displayed on a radial menu, ready to be selected and cast.",
  "psi.book.page.cadAssembler.5": "A CAD with one bullet loaded",
  "psi.book.entry.spellProgrammer": "Spell Programmer",
  "psi.book.page.spellProgrammer.0": "If the $(l:basics/cad_assembler)$(o)$(item)CAD Assembler$(0)$(/l) is the heart of $(thing)Psi$(0), then the $(item)Spell Programmer$(0) is the brains of the mod. It's where $(thing)Spells$(0) are written and compiled, and eventually copied into $(item)Spell Bullets$(0) to be cast.$(p)When placed and opened ($(k:use)), it displays a large 9x9 grid; see $(l:basics/tutorial_1)the tutorial entries$(/l) for more in-depth knowledge on using this grid.",
  "psi.book.page.spellProgrammer.1": "Hour Of Code",
  "psi.book.entry.vectorPrimer": "A Primer On Vectors",
  "psi.book.page.vectorPrimer.0": "$(thing)Psi$(0) uses the concept of a Vector extensively. Therefore, if you haven't the foggiest idea what a vector is, I strongly recommend you watch the video below.$(p)The explanation in the next few pages is $(l)simplified$() for beginners. Don't take it as definitive.",
  "psi.book.page.vectorPrimer.1": "In the world of $(thing)Psi$(0) (and indeed in a $(thing)Minecraft$(0) world), all vectors are three-dimensional. In essence, they're just lists of three coordinates: $(o)x$(), $(o)y$(), $(o)z$().$(p)The $(o)x$()-coordinate represents east when positive and west when negative, the $(o)y$()-direction up and down, and the $(o)z$()-direction south and north.$(p)If this doesn't make sense yet, open the debug screen (F3) and run around, paying attention to the row labeled \"XYZ:\".$(br)You'll understand.",
  "psi.book.page.vectorPrimer.2": "That list of three numbers on the debug screen is, in fact, the first type of vector you'll meet: a $(l)position vector$().$(p)A position vector simply represents the location of a block, or an entity, or perhaps some empty space in the world. A single fixed location, represented by a list [$(o)x$(), $(o)y$(), $(o)z$()].$(p)However, not all vectors represent positions-- and it's important to note that $(l)any three numbers in a list constitute a vector$().",
  "psi.book.page.vectorPrimer.3": "An interesting fact about vectors is that they're extremely easy to add.$(p)For example, say we have a grass block at some location, which we choose to represent as [$(o)x$(), $(o)y$(), $(o)z$()].$(p)If we wish to add another vector (e.g. [0, 1, 0]) to this one, all we would have to do is add corresponding numbers:$(br)our vector sum would be [$(o)x$()+0, $(o)y$()+1, $(o)z$()+0], or just [$(o)x$(), $(o)y$()+1, $(o)z$()].",
  "psi.book.page.vectorPrimer.4": "Since the $(o)y$()-component of our new vector has increased by one, and positive-$(o)y$() means up, this new vector simply represents the block above our grass block.$(p)The vector [0, 1, 0] represents the $(o)difference$() in position between our original and new vector, and it's our second type of vector: an $(l)offset vector$().",
  "psi.book.page.vectorPrimer.5": "Offset vectors are what most spellslingers spend the majority of their time manipulating, so a mastery over them is key.$(p)Usually, a mage starts with a single position vector, then adds, subtracts, or otherwise combines offset vectors with this position vector in order to target their desired point in the world.",
  "psi.book.page.vectorPrimer.6": "It's important to note that the idea \"offset\" and \"position\" vectors is conceptual; the terms are unique to the terminology of this tablet.$(p)Again: all $(thing)Psi$(0) vectors are just lists of three numbers, and there's nothing stopping you from pretending the distinction doesn't exist.$(p)Indeed, in some contexts outside the scope of this book, the distinction doesn't even make $(o)sense$().",
  "psi.book.page.vectorPrimer.7": "Offset vectors have $(l)magnitudes$().$(p)You can think of an offset vector's magnitude as its \"length,\" or the distance between a position in the world, and that same position when the offset vector is added to it.$(p)For example, our earlier offset vector [0, 1, 0] simply moved the position one block-length up, so it had a length, and therefore a magnitude, of 1.",
  "psi.book.page.vectorPrimer.8": "Since a distance is always positive, so are vectors' magnitudes.$(p)Consider the vector [0, -3, 0] as an example: it represents down, three blocks-- yet the total distance moved is three blocks, and the \"down\" bit doesn't matter.$(p)Therefore, the magnitude of this vector is $(l)positive$() 3.",
  "psi.book.page.vectorPrimer.9": "Almost all vectors also have $(l)directions$().$(p)An offset vector's direction is, well, the direction something would move if it followed the vector in a straight line.$(p)For example, the direction of [0, 1, 0] is simply straight up.$(p)The vector [1, 0, -1], on the other hand, represents one block east and one block north, so its direction is just straight ahead, due northeast.",
  "psi.book.page.vectorPrimer.10": "(Most directions aren't so nice, usually looking like \"36.86 degrees north of west, 22.62 degrees below the horizon.\")$(p)Note that the only vector without a direction is [0, 0, 0] (the $(l)zero vector$()), since you have to be going somewhere $(o)else$() to have a direction.$(p)Note that the direction of a position vector is almost as meaningless as its magnitude-- most $(thing)Spells$(0) don't need to know \"where should I go to get away from bedrock at world spawn.\"",
  "psi.book.page.vectorPrimer.11": "As a matter of fact, you can reconstruct any vector, given only its magnitude and direction, into a list of three numbers (which are known as the $(l)components$() of the vector).$(p)For example, the direction \"up\" and the magnitude 1 correspond to the vector [0, 1, 0].$(p)This isn't as surprising as it may seem: after all, if someone tells you which direction to go, and how far, you should know they want you to be.",
  "psi.book.page.vectorPrimer.12": "There are several simple ways to manipulate position and offset vectors.$(p)First, we can add a position and an offset vector to get another position vector, as we did earlier with the grass block example.$(p)On the other hand, we can of course $(o)subtract$() two position vectors to get the offset vector representing the offset from one to the other:$(br)[$(o)x$(), $(o)y$()+1, $(o)z$()] \u2212 [$(o)x$(), $(o)y$(), $(o)z$()] = [0, 1, 0].",
  "psi.book.page.vectorPrimer.13": "Perhaps more interestingly, we can add two offset vectors, to get a single offset representing their combination.$(p)Adding this offset to a position vector would be equivalent to first adding one of its components to that position vector, then adding the other.",
  "psi.book.page.vectorPrimer.14": "And last, but most certainly not least, of the simple operations: we can $(l)scale$() a vector, by multiplying it by a number.$(p)Note that we're multiplying it by a number, and $(o)not$() another vector.$(p)If we wish to scale an vector [$(o)p$(), $(o)q$(), $(o)r$()] by a factor $(o)n$(), we simply multiply each of the vector's components by $(o)n$():$(br)$(o)n$()\u00b7[$(o)p$(), $(o)q$(), $(o)r$()] = [$(o)n$()\u00b7$(o)p$(), $(o)n$()\u00b7$(o)q$(), $(o)n$()\u00b7$(o)r$()].",
  "psi.book.page.vectorPrimer.15": "This final operation relates nicely indeed to the concepts of magnitude and direction.$(p)When you scale a vector by a number $(o)n$(), you:$(li)multiply its magnitude by the absolute value of $(o)n$(), and$(li)don't change its direction if $(o)n$() is positive, but reverse its direction if $(o)n$() is negative.$(p)If $(o)n$()=0, then of course the resulting vector is the zero vector.",
  "psi.book.page.vectorPrimer.16": "On the other hand, if we set $(o)n$()=-1, then we get a vector with the same magnitude (the absolute value of -1 is 1), but pointing the opposite way (since -1 is negative)!$(p)This vector is known as the $(l)negative$() of the original, and when the two are added we get the zero vector.$(p)This makes sense, since if we go in a direction, then go in the opposite direction for the same distance, our net movement is zero.",
  "psi.book.page.vectorPrimer.17": "If, instead of multiplying, we $(o)divide$() a (nonzero) vector by its magnitude, we get a vector with magnitude 1 (since anything divided by itself is 1), but the same direction (since magnitudes are always positive).$(p)This is an important and well-known operation, known as $(l)normalizing$() a vector; the vector that results (and, in fact, any vector with magnitude 1) is called a $(l)unit vector$().",
  "psi.book.page.vectorPrimer.18": "Unit vectors have a fixed magnitude, so they only represent direction.$(p)Many $(thing)Spell Pieces$(0) related to direction return unit vectors, like $(piece)Operator: Vector Axis Raycast$(0) and $(piece)Operator: Entity Look$(0).$(p)Indeed, there are $(thing)Operators$(0) to do $(o)most$() of the vector operations laid out in this article, usually with self-explanatory names.",
  "psi.book.page.vectorPrimer.19": "The operations and their corresponding $(thing)Operators$(0) are as follows:$(li)Negating is $(piece)Operator: Vector Negate$(0);$(li)Normalizing is $(piece)Operator: Vector Normalize$(0);$(li)Scaling is $(piece)Operator: Vector Multiply$(0) and $(piece)Operator: Vector Divide$(0);$(li)Taking the magnitude is $(piece)Operator: Vector Magnitude$(0);$(li)Adding is $(piece)Operator: Vector Sum$(0);$(li)Subtracting is $(piece)Operator: Vector Subtract$(0).",
  "psi.book.page.vectorPrimer.20": "Finally: vectors are still lists of three numbers. Don't lose sight of that.$(p)In a $(l:basics/spell_programmer)$(o)$(item)Spell Programmer$(0)$(/l), they can be constructed from up to three numbers with $(piece)Operator: Vector Construct$(0).$(p)Conversely, a vector can also be broken back down into numbers with $(piece)Operator: Extract X$(0), $(piece)Operator: Extract Y$(0), and $(piece)Operator: Extract Z$(0).",
  "psi.book.page.vectorPrimer.21": "Congratulations on making it through this tutorial!$(p)Again, this is just an introduction to vectors-- I've not said anything about dot or cross products, or vector projections, for example.$(p)But this should be more than enough to put together some quite interesting $(thing)Spells$(0) already.$(p)That's all-- now go forth and spellsling!",
  "psi.book.entry.tutorial1": "Tutorial (1): Writing A Spell"
}